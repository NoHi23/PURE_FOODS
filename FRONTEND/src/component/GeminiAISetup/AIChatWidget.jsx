import React, { useState, useEffect, useRef } from 'react';
import { GoogleGenerativeAI } from "@google/generative-ai";
import './AIChatWidget.css'
const API_KEY = "AIzaSyA8FkJ9XTonXbIsN0rcN-GeLlrmNmUR3EM";
const genAI = new GoogleGenerativeAI(API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-preview-05-20" });


const ChatIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
  </svg>
);

function AIChatWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [messages, setMessages] = useState([
    { id: 1, text: 'Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Pure Foods. B·∫°n c·∫ßn t√¨m g√¨?', sender: 'ai' }
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };
  useEffect(scrollToBottom, [messages]);

  // H√†m g·ªçi API backend, kh√¥ng thay ƒë·ªïi nhi·ªÅu
  async function findProductsByCriteria(criteria, page = 0, size = 12) {
    const params = new URLSearchParams();

    if (criteria.q) params.append('q', criteria.q); // S·ª≠a t·ª´ productName -> q
    if (criteria.categoryId) params.append('categoryId', criteria.categoryId);
    if (criteria.supplierId) params.append('supplierId', criteria.supplierId);
    if (criteria.minDiscount) params.append('minDiscount', criteria.minDiscount); // S·ª≠a t·ª´ discountPercent -> minDiscount

    params.append('page', page);
    params.append('size', size);

    const res = await fetch(`http://localhost:8082/PureFoods/api/product/search?${params.toString()}`);

    if (!res.ok) {
      const errorBody = await res.text();
      console.error("API Error Response:", errorBody);
      throw new Error('L·ªói khi g·ªçi API t√¨m ki·∫øm s·∫£n ph·∫©m');
    }
    return res.json();
  }
  const systemInstruction = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi d√πng t√¨m s·∫£n ph·∫©m. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn ƒë·ªïi truy v·∫•n ng√¥n ng·ªØ t·ª± nhi√™n th√†nh JSON ƒë·ªÉ g·ª≠i ƒë·∫øn API t√¨m ki·∫øm s·∫£n ph·∫©m. 
Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng object JSON, KH√îNG gi·∫£i th√≠ch th√™m.

C√°c tr∆∞·ªùng ƒë∆∞·ª£c h·ªó tr·ª£:
- q: t·ª´ kh√≥a t√¨m ki·∫øm
- priceFrom: gi√° t·ªëi thi·ªÉu (s·ªë)
- priceTo: gi√° t·ªëi ƒëa (s·ªë)
- supplierId: m√£ nh√† cung c·∫•p
- categoryId: m√£ danh m·ª•c

N·∫øu kh√¥ng bi·∫øt supplierId ho·∫∑c categoryId, h√£y tr·∫£ v·ªÅ "supplierName" ho·∫∑c "categoryName" thay th·∫ø ƒë·ªÉ h·ªá th·ªëng x·ª≠ l√Ω sau.

üéØ N·∫øu ng∆∞·ªùi d√πng ch·ªâ nh·∫≠p m·ªôt t·ª´ (v√≠ d·ª•: "Vinamilk", "Fresh", "Rau", "Tr√°i c√¢y", "Th·ªãt", "B√°nh k·∫πo"):
- N·∫øu l√† t√™n th∆∞∆°ng hi·ªáu ho·∫∑c nh√† cung c·∫•p ‚Üí g√°n v√†o "supplierName"
- N·∫øu l√† lo·∫°i h√†ng, nh√≥m th·ª±c ph·∫©m ‚Üí g√°n v√†o "categoryName"
- N·∫øu kh√¥ng ch·∫Øc ‚Üí g√°n v√†o "q"

C√°c API li√™n quan:
1. [T√¨m s·∫£n ph·∫©m theo ti√™u ch√≠]:
- ƒê·∫ßu v√†o: JSON c√≥ th·ªÉ ch·ª©a q, priceFrom, priceTo, supplierId, categoryId
- API: /api/products/search

2. [L·∫•y supplierId theo t√™n]:
- ƒê·∫ßu v√†o: supplierName
- API: /api/supplier/searchByName?name={name}
- Tr·∫£ v·ªÅ: supplierId

3. [L·∫•y categoryId theo t√™n]:
- ƒê·∫ßu v√†o: categoryName
- API: /api/category/searchByName?name={name}
- Tr·∫£ v·ªÅ: categoryId

V√≠ d·ª•:
"T√¨m s·∫£n ph·∫©m vinamilk gi√° d∆∞·ªõi 20000" ‚Üí 
{ "q": "vinamilk", "priceTo": 20000 }

"T√¨m s·ªØa t·ª´ nh√† cung c·∫•p vinamilk" ‚Üí 
{ "q": "s·ªØa", "supplierName": "vinamilk" }

"Fresh" ‚Üí 
{ "supplierName": "Fresh" }

"Tr√°i c√¢y" ‚Üí 
{ "categoryName": "Tr√°i c√¢y" }

"B√°nh" ‚Üí 
{ "q": "b√°nh" }
`;



  async function resolveMissingIds(criteria) {
    const updated = { ...criteria };

    // L·∫•y supplierId n·∫øu ch·ªâ c√≥ supplierName
    if (updated.supplierName && !updated.supplierId) {
      try {
        const res = await fetch(`http://localhost:8082/PureFoods/api/supplier/searchByName?name=${encodeURIComponent(updated.supplierName)}`);

        if (res.ok) {
          const data = await res.json();
          if (data?.supplierId) {
            updated.supplierId = data.supplierId;
            delete updated.supplierName;
          } else {
            console.warn("Kh√¥ng t√¨m th·∫•y supplierId trong response", data);
          }
        } else {
          console.warn("Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p:", updated.supplierName);
        }
      } catch (e) {
        console.warn("L·ªói khi l·∫•y supplierId:", e);
      }
    }

    if (updated.categoryName && !updated.categoryId) {
      try {
        const res = await fetch(`http://localhost:8082/PureFoods/api/category/searchByName?name=${encodeURIComponent(updated.categoryName)}`);
        const data = await res.json();
        if (data?.categoryId) {
          updated.categoryId = data.categoryId;
          delete updated.categoryName;
        }
      } catch (e) {
        console.warn("Kh√¥ng th·ªÉ l·∫•y categoryId:", e);
      }
    }

    return updated;
  }
  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMsg = { id: Date.now(), text: inputValue, sender: 'user' };
    setMessages(m => [...m, userMsg]);
    setInputValue('');
    setIsLoading(true);

    const prompt = `${systemInstruction}\nUser: "${inputValue}"`;

    try {
      const geminiRes = await model.generateContent(prompt);
      const responseText = geminiRes.response.text();

      const cleanedJsonString = responseText.replace(/```json/g, '').replace(/```/g, '').trim();
      const rawCriteria = JSON.parse(cleanedJsonString);
      const jsonCriteria = await resolveMissingIds(rawCriteria);
      const apiResponse = await findProductsByCriteria(jsonCriteria);

      if (apiResponse && apiResponse.products && apiResponse.products.length > 0) {
        setMessages(m => [
          ...m,
          { id: Date.now() + 1, text: `T√¨m th·∫•y ${apiResponse.totalElements} s·∫£n ph·∫©m ph√π h·ª£p.`, sender: 'ai' },
          { id: Date.now() + 2, sender: 'products', products: apiResponse.products }
        ]);
      } else {
        setMessages(m => [
          ...m,
          { id: Date.now() + 1, text: 'Xin l·ªói, kh√¥ng t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.', sender: 'ai' }
        ]);
      }

    } catch (err) {
      console.error("ƒê√£ x·∫£y ra l·ªói:", err);
      setMessages(m => [
        ...m,
        { id: Date.now() + 1, text: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', sender: 'ai' }
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`ai-chat-widget ${isOpen ? 'active' : ''}`}>
      <button className="chat-toggle-button" onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? '‚úï' : <ChatIcon />}
      </button>

      <div className="chat-panel">
        <div className="chat-header">
          <h3>Pure Foods AI H·ªó tr·ª£</h3>
          <button className="close-btn" onClick={() => setIsOpen(false)}>‚úï</button>
        </div>
        <div className="chat-messages">
          {messages.map(msg => {
            if (msg.sender === 'products') {
              return (
                <div key={msg.id} style={{ display: "flex", flexDirection: "column", gap: "16px", marginTop: "12px" }}>
                  {msg.products.map(p => (
                    <a
                      key={p.productId}
                      href={`/product/${p.productId}`}
                      style={{
                        display: "flex",
                        alignItems: "center",
                        gap: "16px",
                        padding: "12px",
                        border: "1px solid #e0e0e0",
                        borderRadius: "10px",
                        textDecoration: "none",
                        backgroundColor: "#fff",
                        transition: "box-shadow 0.2s ease",
                      }}
                      onMouseEnter={e => e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 0, 0, 0.08)"}
                      onMouseLeave={e => e.currentTarget.style.boxShadow = "none"}
                    >
                      <img
                        src={p.imageURL}
                        alt={p.productName}
                        style={{
                          width: "90px",
                          height: "90px",
                          objectFit: "cover",
                          borderRadius: "8px"
                        }}
                      />
                      <div style={{ display: "flex", flexDirection: "column" }}>
                        <h4 style={{ margin: 0, fontSize: "16px", color: "#333" }}>{p.productName}</h4>
                        {p.discountPercent > 0 ? (
                          <p style={{ margin: "4px 0 0", color: "#666", fontSize: "14px" }}>
                            <del style={{ color: "#999", marginRight: "6px" }}>${p.price.toLocaleString()}</del>
                            ${(p.price * (1 - p.discountPercent / 100)).toLocaleString()}
                          </p>
                        ) : (
                          <p style={{ margin: "4px 0 0", color: "#666", fontSize: "14px" }}>
                            ${p.price.toLocaleString()}
                          </p>
                        )}
                      </div>
                    </a>
                  ))}
                </div>
              );
            }
            return (
              <div key={msg.id} className={`message ${msg.sender}`}>
                <p>{msg.text}</p>
              </div>
            );
          })}
          {isLoading && (
            <div className="message ai">
              <p>ƒêang t√¨m ki·∫øm...</p>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        <form className="chat-input-form" onSubmit={handleSendMessage}>
          <input
            type="text"
            placeholder="Nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            disabled={isLoading}
          />
          <button type="submit" disabled={isLoading}>G·ª≠i</button>
        </form>
      </div>
    </div>
  );
}

export default AIChatWidget;